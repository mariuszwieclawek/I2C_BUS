
I2C_BUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00000e3a  00000ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080028c  0080028c  0000105a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ba0  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001197  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001310  00000000  00000000  00005027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  00006338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ae  00000000  00000000  00006800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001474  00000000  00000000  000071ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00008622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e3       	ldi	r30, 0x3A	; 58
  c8:	fe e0       	ldi	r31, 0x0E	; 14
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 38       	cpi	r26, 0x8C	; 140
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	ac e8       	ldi	r26, 0x8C	; 140
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 39       	cpi	r26, 0x9C	; 156
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
  ea:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <AM2320_print_COM>:
#include "AM2320.h"

void AM2320_print_COM(void){
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	c4 56       	subi	r28, 0x64	; 100
 100:	d1 09       	sbc	r29, r1
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	char buff[100];
	sprintf(buff, "Humidity = %03d.%02d%%	Temperature = %02d.%02d\n\r", sensor.high_humidity, sensor.low_humidity, sensor.high_temperature, sensor.low_temperature);
 10c:	ed e8       	ldi	r30, 0x8D	; 141
 10e:	f2 e0       	ldi	r31, 0x02	; 2
 110:	35 81       	ldd	r19, Z+5	; 0x05
 112:	24 81       	ldd	r18, Z+4	; 0x04
 114:	93 81       	ldd	r25, Z+3	; 0x03
 116:	82 81       	ldd	r24, Z+2	; 0x02
 118:	1f 92       	push	r1
 11a:	3f 93       	push	r19
 11c:	1f 92       	push	r1
 11e:	2f 93       	push	r18
 120:	1f 92       	push	r1
 122:	9f 93       	push	r25
 124:	1f 92       	push	r1
 126:	8f 93       	push	r24
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	9f 93       	push	r25
 12e:	8f 93       	push	r24
 130:	8e 01       	movw	r16, r28
 132:	0f 5f       	subi	r16, 0xFF	; 255
 134:	1f 4f       	sbci	r17, 0xFF	; 255
 136:	1f 93       	push	r17
 138:	0f 93       	push	r16
 13a:	0e 94 31 04 	call	0x862	; 0x862 <sprintf>
	USART_PutS(buff);
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 24 04 	call	0x848	; 0x848 <USART_PutS>
}
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	cc 59       	subi	r28, 0x9C	; 156
 150:	df 4f       	sbci	r29, 0xFF	; 255
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <AM2320_print_LCD>:

void AM2320_print_LCD(void){
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	c4 56       	subi	r28, 0x64	; 100
 174:	d1 09       	sbc	r29, r1
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
	char buff[100];
	sprintf(buff, "H=%02d.%02d  T=%02d.%02d", sensor.high_humidity, sensor.low_humidity, sensor.high_temperature, sensor.low_temperature);
 180:	ed e8       	ldi	r30, 0x8D	; 141
 182:	f2 e0       	ldi	r31, 0x02	; 2
 184:	35 81       	ldd	r19, Z+5	; 0x05
 186:	24 81       	ldd	r18, Z+4	; 0x04
 188:	93 81       	ldd	r25, Z+3	; 0x03
 18a:	82 81       	ldd	r24, Z+2	; 0x02
 18c:	1f 92       	push	r1
 18e:	3f 93       	push	r19
 190:	1f 92       	push	r1
 192:	2f 93       	push	r18
 194:	1f 92       	push	r1
 196:	9f 93       	push	r25
 198:	1f 92       	push	r1
 19a:	8f 93       	push	r24
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	8e 01       	movw	r16, r28
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	1f 93       	push	r17
 1ac:	0f 93       	push	r16
 1ae:	0e 94 31 04 	call	0x862	; 0x862 <sprintf>
	LCD1602_goto_xy(0,1);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 a8 01 	call	0x350	; 0x350 <LCD1602_goto_xy>
	LCD1602_send_string(buff);
 1ba:	c8 01       	movw	r24, r16
 1bc:	0e 94 b0 01 	call	0x360	; 0x360 <LCD1602_send_string>
}
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	cc 59       	subi	r28, 0x9C	; 156
 1cc:	df 4f       	sbci	r29, 0xFF	; 255
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <send_half_byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
 1e6:	c2 95       	swap	r28
 1e8:	c0 7f       	andi	r28, 0xF0	; 240
 1ea:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 1ee:	64 60       	ori	r22, 0x04	; 4
 1f0:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <__data_end>
 1f4:	8e e4       	ldi	r24, 0x4E	; 78
 1f6:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 1fa:	87 ec       	ldi	r24, 0xC7	; 199
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <send_half_byte+0x1c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <send_half_byte+0x22>
 204:	00 00       	nop
 206:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 20a:	6c 2b       	or	r22, r28
 20c:	8e e4       	ldi	r24, 0x4E	; 78
 20e:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 212:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 216:	6b 7f       	andi	r22, 0xFB	; 251
 218:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <__data_end>
 21c:	8e e4       	ldi	r24, 0x4E	; 78
 21e:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 222:	87 ec       	ldi	r24, 0xC7	; 199
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <send_half_byte+0x44>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <send_half_byte+0x4a>
 22c:	00 00       	nop
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCD1602_send_command>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	c8 2f       	mov	r28, r24
 238:	d8 2f       	mov	r29, r24
 23a:	d2 95       	swap	r29
 23c:	df 70       	andi	r29, 0x0F	; 15
 23e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 242:	6e 7f       	andi	r22, 0xFE	; 254
 244:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <__data_end>
 248:	8e e4       	ldi	r24, 0x4E	; 78
 24a:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 24e:	8d 2f       	mov	r24, r29
 250:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 254:	8c 2f       	mov	r24, r28
 256:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD1602_send_char>:
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	c8 2f       	mov	r28, r24
 266:	d8 2f       	mov	r29, r24
 268:	d2 95       	swap	r29
 26a:	df 70       	andi	r29, 0x0F	; 15
 26c:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 270:	61 60       	ori	r22, 0x01	; 1
 272:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <__data_end>
 276:	8e e4       	ldi	r24, 0x4E	; 78
 278:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 27c:	8d 2f       	mov	r24, r29
 27e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 282:	8c 2f       	mov	r24, r28
 284:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <LCD1602_Init>:
 28e:	0e 94 09 02 	call	0x412	; 0x412 <TWI_Init>
 292:	8f e5       	ldi	r24, 0x5F	; 95
 294:	9a ee       	ldi	r25, 0xEA	; 234
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD1602_Init+0x8>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD1602_Init+0xe>
 29c:	00 00       	nop
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	90 e4       	ldi	r25, 0x40	; 64
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD1602_Init+0x1a>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD1602_Init+0x20>
 2ae:	00 00       	nop
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 2b6:	8f e8       	ldi	r24, 0x8F	; 143
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD1602_Init+0x2c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD1602_Init+0x32>
 2c0:	00 00       	nop
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 2c8:	8f e9       	ldi	r24, 0x9F	; 159
 2ca:	9f e0       	ldi	r25, 0x0F	; 15
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD1602_Init+0x3e>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD1602_Init+0x44>
 2d2:	00 00       	nop
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <send_half_byte>
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD1602_Init+0x50>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD1602_Init+0x56>
 2e4:	00 00       	nop
 2e6:	88 e2       	ldi	r24, 0x28	; 40
 2e8:	0e 94 19 01 	call	0x232	; 0x232 <LCD1602_send_command>
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD1602_Init+0x62>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD1602_Init+0x68>
 2f6:	00 00       	nop
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	0e 94 19 01 	call	0x232	; 0x232 <LCD1602_send_command>
 2fe:	8f e9       	ldi	r24, 0x9F	; 159
 300:	9f e0       	ldi	r25, 0x0F	; 15
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD1602_Init+0x74>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD1602_Init+0x7a>
 308:	00 00       	nop
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 19 01 	call	0x232	; 0x232 <LCD1602_send_command>
 310:	8f e9       	ldi	r24, 0x9F	; 159
 312:	9f e0       	ldi	r25, 0x0F	; 15
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD1602_Init+0x86>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD1602_Init+0x8c>
 31a:	00 00       	nop
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	0e 94 19 01 	call	0x232	; 0x232 <LCD1602_send_command>
 322:	8f e9       	ldi	r24, 0x9F	; 159
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <LCD1602_Init+0x98>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <LCD1602_Init+0x9e>
 32c:	00 00       	nop
 32e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 332:	68 60       	ori	r22, 0x08	; 8
 334:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <__data_end>
 338:	8e e4       	ldi	r24, 0x4E	; 78
 33a:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 33e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <__data_end>
 342:	6d 7f       	andi	r22, 0xFD	; 253
 344:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <__data_end>
 348:	8e e4       	ldi	r24, 0x4E	; 78
 34a:	0e 94 85 02 	call	0x50a	; 0x50a <TWI_WriteByAddr>
 34e:	08 95       	ret

00000350 <LCD1602_goto_xy>:

/* LCD cursor position control */
void LCD1602_goto_xy(char col, char row){
	char adr;

	adr = 0x40*row + col;
 350:	90 e4       	ldi	r25, 0x40	; 64
 352:	69 9f       	mul	r22, r25
 354:	80 0d       	add	r24, r0
 356:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD1602_send_command(adr);
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	0e 94 19 01 	call	0x232	; 0x232 <LCD1602_send_command>
 35e:	08 95       	ret

00000360 <LCD1602_send_string>:
}


/* Send text to LCD */
void LCD1602_send_string(const char *str){
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	8c 01       	movw	r16, r24
	int i;

	for(i = 0; str[i] != '\0'; i++)
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	d0 e0       	ldi	r29, 0x00	; 0
 36e:	03 c0       	rjmp	.+6      	; 0x376 <LCD1602_send_string+0x16>
		LCD1602_send_char(str[i]);
 370:	0e 94 30 01 	call	0x260	; 0x260 <LCD1602_send_char>

/* Send text to LCD */
void LCD1602_send_string(const char *str){
	int i;

	for(i = 0; str[i] != '\0'; i++)
 374:	21 96       	adiw	r28, 0x01	; 1
 376:	f8 01       	movw	r30, r16
 378:	ec 0f       	add	r30, r28
 37a:	fd 1f       	adc	r31, r29
 37c:	80 81       	ld	r24, Z
 37e:	81 11       	cpse	r24, r1
 380:	f7 cf       	rjmp	.-18     	; 0x370 <LCD1602_send_string+0x10>
		LCD1602_send_char(str[i]);
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <main>:
#include "AM2320.h"
#include "usart.h"
#include "RTC_PCF8563.h"
#include "EEPROM_24AA01.h"

int main(void){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	2c 97       	sbiw	r28, 0x0c	; 12
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
	
	EEPROM_read_all_data();
	*/
	
	
	TWI_Init();
 3a0:	0e 94 09 02 	call	0x412	; 0x412 <TWI_Init>
	USART_Init();
 3a4:	0e 94 11 04 	call	0x822	; 0x822 <USART_Init>
	//TWI_Ping_Slave();
	LCD1602_Init();
 3a8:	0e 94 47 01 	call	0x28e	; 0x28e <LCD1602_Init>
	
	sensor.high_temperature = 25;
 3ac:	ed e8       	ldi	r30, 0x8D	; 141
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	89 e1       	ldi	r24, 0x19	; 25
 3b2:	84 83       	std	Z+4, r24	; 0x04
	sensor.low_temperature = 15;
 3b4:	8f e0       	ldi	r24, 0x0F	; 15
 3b6:	85 83       	std	Z+5, r24	; 0x05
	sensor.high_humidity = 56;
 3b8:	88 e3       	ldi	r24, 0x38	; 56
 3ba:	82 83       	std	Z+2, r24	; 0x02
	sensor.low_humidity = 76;
 3bc:	8c e4       	ldi	r24, 0x4C	; 76
 3be:	83 83       	std	Z+3, r24	; 0x03
	
	struct tm data_time;
	
	RTC_set_time(17,55,40,12,6,22,7);
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f7 e0       	ldi	r31, 0x07	; 7
 3c4:	cf 2e       	mov	r12, r31
 3c6:	f0 2d       	mov	r31, r0
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f6 e1       	ldi	r31, 0x16	; 22
 3cc:	ef 2e       	mov	r14, r31
 3ce:	f0 2d       	mov	r31, r0
 3d0:	06 e0       	ldi	r16, 0x06	; 6
 3d2:	2c e0       	ldi	r18, 0x0C	; 12
 3d4:	48 e2       	ldi	r20, 0x28	; 40
 3d6:	67 e3       	ldi	r22, 0x37	; 55
 3d8:	81 e1       	ldi	r24, 0x11	; 17
 3da:	0e 94 bf 03 	call	0x77e	; 0x77e <RTC_set_time>

	while(1){
		RTC_get_time(&data_time);
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	0e 94 55 03 	call	0x6aa	; 0x6aa <RTC_get_time>
		RTC_print_COM(&data_time);
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	0e 94 96 02 	call	0x52c	; 0x52c <RTC_print_COM>
		RTC_print_LCD(&data_time);
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RTC_print_LCD>
		AM2320_print_COM();
 3f6:	0e 94 79 00 	call	0xf2	; 0xf2 <AM2320_print_COM>
		AM2320_print_LCD();
 3fa:	0e 94 b3 00 	call	0x166	; 0x166 <AM2320_print_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	83 ed       	ldi	r24, 0xD3	; 211
 402:	90 e3       	ldi	r25, 0x30	; 48
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	e6 cf       	rjmp	.-52     	; 0x3de <main+0x52>

00000412 <TWI_Init>:
			USART_PutInt(slave_address,16);
			USART_PutS("\n\r");
		}
		TWI_Stop();
	}
}
 412:	e4 e6       	ldi	r30, 0x64	; 100
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8f 77       	andi	r24, 0x7F	; 127
 41a:	80 83       	st	Z, r24
 41c:	88 e4       	ldi	r24, 0x48	; 72
 41e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 422:	08 95       	ret

00000424 <TWI_Start>:
 424:	84 ea       	ldi	r24, 0xA4	; 164
 426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 42a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 42e:	88 23       	and	r24, r24
 430:	e4 f7       	brge	.-8      	; 0x42a <TWI_Start+0x6>
 432:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 436:	88 7f       	andi	r24, 0xF8	; 248
 438:	88 30       	cpi	r24, 0x08	; 8
 43a:	31 f0       	breq	.+12     	; 0x448 <TWI_Start+0x24>
 43c:	84 ee       	ldi	r24, 0xE4	; 228
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 24 04 	call	0x848	; 0x848 <USART_PutS>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	08 95       	ret
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	08 95       	ret

0000044c <TWI_Stop>:
 44c:	84 e9       	ldi	r24, 0x94	; 148
 44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 452:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 456:	84 fd       	sbrc	r24, 4
 458:	fc cf       	rjmp	.-8      	; 0x452 <TWI_Stop+0x6>
 45a:	08 95       	ret

0000045c <TWI_Write_SLA_W>:
 45c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 460:	84 e8       	ldi	r24, 0x84	; 132
 462:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 466:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 46a:	88 23       	and	r24, r24
 46c:	e4 f7       	brge	.-8      	; 0x466 <TWI_Write_SLA_W+0xa>
 46e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 472:	88 7f       	andi	r24, 0xF8	; 248
 474:	88 31       	cpi	r24, 0x18	; 24
 476:	31 f0       	breq	.+12     	; 0x484 <TWI_Write_SLA_W+0x28>
 478:	81 ef       	ldi	r24, 0xF1	; 241
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 24 04 	call	0x848	; 0x848 <USART_PutS>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	08 95       	ret
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret

00000488 <TWI_Write_SLA_R>:
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 48e:	84 e8       	ldi	r24, 0x84	; 132
 490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 494:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 498:	88 23       	and	r24, r24
 49a:	e4 f7       	brge	.-8      	; 0x494 <TWI_Write_SLA_R+0xc>
 49c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4a0:	88 7f       	andi	r24, 0xF8	; 248
 4a2:	80 34       	cpi	r24, 0x40	; 64
 4a4:	31 f0       	breq	.+12     	; 0x4b2 <TWI_Write_SLA_R+0x2a>
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	92 e0       	ldi	r25, 0x02	; 2
 4aa:	0e 94 24 04 	call	0x848	; 0x848 <USART_PutS>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret

000004b6 <TWI_Write_data>:
 4b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4ba:	84 e8       	ldi	r24, 0x84	; 132
 4bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c4:	88 23       	and	r24, r24
 4c6:	e4 f7       	brge	.-8      	; 0x4c0 <TWI_Write_data+0xa>
 4c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4cc:	88 7f       	andi	r24, 0xF8	; 248
 4ce:	88 32       	cpi	r24, 0x28	; 40
 4d0:	31 f0       	breq	.+12     	; 0x4de <TWI_Write_data+0x28>
 4d2:	87 e1       	ldi	r24, 0x17	; 23
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	0e 94 24 04 	call	0x848	; 0x848 <USART_PutS>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret

000004e2 <TWI_Read_ACK>:
 4e2:	84 ec       	ldi	r24, 0xC4	; 196
 4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ec:	88 23       	and	r24, r24
 4ee:	e4 f7       	brge	.-8      	; 0x4e8 <TWI_Read_ACK+0x6>
 4f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4f4:	08 95       	ret

000004f6 <TWI_Read_NACK>:
 4f6:	84 e8       	ldi	r24, 0x84	; 132
 4f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 500:	88 23       	and	r24, r24
 502:	e4 f7       	brge	.-8      	; 0x4fc <TWI_Read_NACK+0x6>
 504:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 508:	08 95       	ret

0000050a <TWI_WriteByAddr>:


void TWI_WriteByAddr(uint8_t addr, uint8_t data) {
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	d8 2f       	mov	r29, r24
 510:	c6 2f       	mov	r28, r22
	TWI_Start();
 512:	0e 94 12 02 	call	0x424	; 0x424 <TWI_Start>
	TWI_Write_SLA_W(addr);
 516:	8d 2f       	mov	r24, r29
 518:	0e 94 2e 02 	call	0x45c	; 0x45c <TWI_Write_SLA_W>
	TWI_Write_data(data);
 51c:	8c 2f       	mov	r24, r28
 51e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Stop();
 522:	0e 94 26 02 	call	0x44c	; 0x44c <TWI_Stop>
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <RTC_print_COM>:
		value &= MONTHS_MASK;			
	else if (register_address == YEARS_REG)			
		value &= YEARS_MASK;
		
	return bcd_to_decimal(value); //PCF8563 sends data in BCD code format so we need to convert it (datasheet)		
}
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	c4 56       	subi	r28, 0x64	; 100
 53a:	d1 09       	sbc	r29, r1
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	fc 01       	movw	r30, r24
 548:	54 81       	ldd	r21, Z+4	; 0x04
 54a:	45 81       	ldd	r20, Z+5	; 0x05
 54c:	33 81       	ldd	r19, Z+3	; 0x03
 54e:	20 81       	ld	r18, Z
 550:	91 81       	ldd	r25, Z+1	; 0x01
 552:	82 81       	ldd	r24, Z+2	; 0x02
 554:	65 2f       	mov	r22, r21
 556:	05 2e       	mov	r0, r21
 558:	00 0c       	add	r0, r0
 55a:	77 0b       	sbc	r23, r23
 55c:	7f 93       	push	r23
 55e:	5f 93       	push	r21
 560:	57 81       	ldd	r21, Z+7	; 0x07
 562:	5f 93       	push	r21
 564:	56 81       	ldd	r21, Z+6	; 0x06
 566:	5f 93       	push	r21
 568:	64 2f       	mov	r22, r20
 56a:	04 2e       	mov	r0, r20
 56c:	00 0c       	add	r0, r0
 56e:	77 0b       	sbc	r23, r23
 570:	7f 93       	push	r23
 572:	4f 93       	push	r20
 574:	43 2f       	mov	r20, r19
 576:	03 2e       	mov	r0, r19
 578:	00 0c       	add	r0, r0
 57a:	55 0b       	sbc	r21, r21
 57c:	5f 93       	push	r21
 57e:	3f 93       	push	r19
 580:	42 2f       	mov	r20, r18
 582:	02 2e       	mov	r0, r18
 584:	00 0c       	add	r0, r0
 586:	55 0b       	sbc	r21, r21
 588:	5f 93       	push	r21
 58a:	2f 93       	push	r18
 58c:	29 2f       	mov	r18, r25
 58e:	09 2e       	mov	r0, r25
 590:	00 0c       	add	r0, r0
 592:	33 0b       	sbc	r19, r19
 594:	3f 93       	push	r19
 596:	9f 93       	push	r25
 598:	28 2f       	mov	r18, r24
 59a:	08 2e       	mov	r0, r24
 59c:	00 0c       	add	r0, r0
 59e:	33 0b       	sbc	r19, r19
 5a0:	3f 93       	push	r19
 5a2:	8f 93       	push	r24
 5a4:	8d e4       	ldi	r24, 0x4D	; 77
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	9f 93       	push	r25
 5aa:	8f 93       	push	r24
 5ac:	8e 01       	movw	r16, r28
 5ae:	0f 5f       	subi	r16, 0xFF	; 255
 5b0:	1f 4f       	sbci	r17, 0xFF	; 255
 5b2:	1f 93       	push	r17
 5b4:	0f 93       	push	r16
 5b6:	0e 94 31 04 	call	0x862	; 0x862 <sprintf>
 5ba:	c8 01       	movw	r24, r16
 5bc:	0e 94 24 04 	call	0x848	; 0x848 <USART_PutS>
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	cc 59       	subi	r28, 0x9C	; 156
 5cc:	df 4f       	sbci	r29, 0xFF	; 255
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	08 95       	ret

000005e2 <RTC_print_LCD>:
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	69 97       	sbiw	r28, 0x19	; 25
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 81       	ld	r18, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	82 81       	ldd	r24, Z+2	; 0x02
 602:	42 2f       	mov	r20, r18
 604:	02 2e       	mov	r0, r18
 606:	00 0c       	add	r0, r0
 608:	55 0b       	sbc	r21, r21
 60a:	5f 93       	push	r21
 60c:	2f 93       	push	r18
 60e:	29 2f       	mov	r18, r25
 610:	09 2e       	mov	r0, r25
 612:	00 0c       	add	r0, r0
 614:	33 0b       	sbc	r19, r19
 616:	3f 93       	push	r19
 618:	9f 93       	push	r25
 61a:	28 2f       	mov	r18, r24
 61c:	08 2e       	mov	r0, r24
 61e:	00 0c       	add	r0, r0
 620:	33 0b       	sbc	r19, r19
 622:	3f 93       	push	r19
 624:	8f 93       	push	r24
 626:	8c e7       	ldi	r24, 0x7C	; 124
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	9f 93       	push	r25
 62c:	8f 93       	push	r24
 62e:	8e 01       	movw	r16, r28
 630:	0f 5f       	subi	r16, 0xFF	; 255
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	1f 93       	push	r17
 636:	0f 93       	push	r16
 638:	0e 94 31 04 	call	0x862	; 0x862 <sprintf>
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	0e 94 a8 01 	call	0x350	; 0x350 <LCD1602_goto_xy>
 644:	c8 01       	movw	r24, r16
 646:	0e 94 b0 01 	call	0x360	; 0x360 <LCD1602_send_string>
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	69 96       	adiw	r28, 0x19	; 25
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <bcd_to_decimal>:
 66a:	98 2f       	mov	r25, r24
 66c:	92 95       	swap	r25
 66e:	9f 70       	andi	r25, 0x0F	; 15
 670:	29 2f       	mov	r18, r25
 672:	22 0f       	add	r18, r18
 674:	92 0f       	add	r25, r18
 676:	29 2f       	mov	r18, r25
 678:	22 0f       	add	r18, r18
 67a:	82 1b       	sub	r24, r18
 67c:	08 95       	ret

0000067e <decimal_to_bcd>:
 67e:	2d ec       	ldi	r18, 0xCD	; 205
 680:	82 9f       	mul	r24, r18
 682:	21 2d       	mov	r18, r1
 684:	11 24       	eor	r1, r1
 686:	92 2f       	mov	r25, r18
 688:	96 95       	lsr	r25
 68a:	96 95       	lsr	r25
 68c:	96 95       	lsr	r25
 68e:	99 0f       	add	r25, r25
 690:	39 2f       	mov	r19, r25
 692:	33 0f       	add	r19, r19
 694:	33 0f       	add	r19, r19
 696:	93 0f       	add	r25, r19
 698:	89 1b       	sub	r24, r25
 69a:	26 95       	lsr	r18
 69c:	26 95       	lsr	r18
 69e:	26 95       	lsr	r18
 6a0:	30 e1       	ldi	r19, 0x10	; 16
 6a2:	23 9f       	mul	r18, r19
 6a4:	80 0d       	add	r24, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	08 95       	ret

000006aa <RTC_get_time>:

void RTC_get_time(struct tm* data){
 6aa:	bf 92       	push	r11
 6ac:	cf 92       	push	r12
 6ae:	df 92       	push	r13
 6b0:	ef 92       	push	r14
 6b2:	ff 92       	push	r15
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	ec 01       	movw	r28, r24
	uint8_t sec, min, hour, day, weekday, month, year;
	
	/* I2C PROCEDURE */
	TWI_Start(); // START I2C
 6be:	0e 94 12 02 	call	0x424	; 0x424 <TWI_Start>
	TWI_Write_SLA_W(PCF8563_Address); // SLAVE ADDRESS IN WRITE MODE
 6c2:	82 ea       	ldi	r24, 0xA2	; 162
 6c4:	0e 94 2e 02 	call	0x45c	; 0x45c <TWI_Write_SLA_W>
	TWI_Write_data(VL_SECONDS_REG); // REGISTER ADDRESS
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Stop(); // STOP I2C
 6ce:	0e 94 26 02 	call	0x44c	; 0x44c <TWI_Stop>
	
	TWI_Start(); // START I2C
 6d2:	0e 94 12 02 	call	0x424	; 0x424 <TWI_Start>
	TWI_Write_SLA_R(PCF8563_Address); // SLAVE ADDRESS IN READ MODE
 6d6:	82 ea       	ldi	r24, 0xA2	; 162
 6d8:	0e 94 44 02 	call	0x488	; 0x488 <TWI_Write_SLA_R>
	sec = TWI_Read_ACK(); // READ DATA AND AUTO INCREMENT ADDRESS OF REGISTER
 6dc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Read_ACK>
 6e0:	b8 2e       	mov	r11, r24
	min = TWI_Read_ACK();
 6e2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Read_ACK>
 6e6:	d8 2e       	mov	r13, r24
	hour = TWI_Read_ACK();
 6e8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Read_ACK>
 6ec:	e8 2e       	mov	r14, r24
	day = TWI_Read_ACK();
 6ee:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Read_ACK>
 6f2:	f8 2e       	mov	r15, r24
	weekday = TWI_Read_ACK();
 6f4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Read_ACK>
 6f8:	08 2f       	mov	r16, r24
	month = TWI_Read_ACK();
 6fa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_Read_ACK>
 6fe:	18 2f       	mov	r17, r24
	year = TWI_Read_NACK(); // NACK
 700:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_Read_NACK>
 704:	c8 2e       	mov	r12, r24
	TWI_Stop(); // STOP
 706:	0e 94 26 02 	call	0x44c	; 0x44c <TWI_Stop>
	
	/* MASK PROPER BITS */
	sec &= SECONDS_MASK;			// SECONDS[6:0] from datasheet
	min &= MINUTES_MASK;			// MINUTES[6:0] from datasheet
 70a:	8d 2d       	mov	r24, r13
 70c:	8f 77       	andi	r24, 0x7F	; 127
 70e:	d8 2e       	mov	r13, r24
	hour &= HOURS_MASK;				// HOURS[5:0] from datasheet
 710:	8e 2d       	mov	r24, r14
 712:	8f 73       	andi	r24, 0x3F	; 63
 714:	e8 2e       	mov	r14, r24
	day &= DAYS_MASK;				// DAYS[5:0] from datasheet
 716:	8f 2d       	mov	r24, r15
 718:	8f 73       	andi	r24, 0x3F	; 63
 71a:	f8 2e       	mov	r15, r24
	weekday &= WEEKDAYS_MASK;		// WEEKDAYS[2:0] from datasheet
 71c:	07 70       	andi	r16, 0x07	; 7
	month &= MONTHS_MASK;			// MONTHS[4:0] from datasheet
 71e:	1f 71       	andi	r17, 0x1F	; 31
	year &= YEARS_MASK;				// YEARS[7:0] from datasheet
	
	/* PCF8563 sends data in BCD code format so we need to convert it to decimal */
	sec = bcd_to_decimal(sec);
 720:	8b 2d       	mov	r24, r11
 722:	8f 77       	andi	r24, 0x7F	; 127
 724:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
 728:	b8 2e       	mov	r11, r24
	min = bcd_to_decimal(min);
 72a:	8d 2d       	mov	r24, r13
 72c:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
 730:	d8 2e       	mov	r13, r24
	hour = bcd_to_decimal(hour);
 732:	8e 2d       	mov	r24, r14
 734:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
 738:	e8 2e       	mov	r14, r24
	day = bcd_to_decimal(day);
 73a:	8f 2d       	mov	r24, r15
 73c:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
 740:	f8 2e       	mov	r15, r24
	weekday = bcd_to_decimal(weekday);
 742:	80 2f       	mov	r24, r16
 744:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
 748:	08 2f       	mov	r16, r24
	month = bcd_to_decimal(month);
 74a:	81 2f       	mov	r24, r17
 74c:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
 750:	18 2f       	mov	r17, r24
	year = bcd_to_decimal(year);
 752:	8c 2d       	mov	r24, r12
 754:	0e 94 35 03 	call	0x66a	; 0x66a <bcd_to_decimal>
	
	/* WRITE TO DATA STRUCTURE */
	data->tm_sec = sec;
 758:	b8 82       	st	Y, r11
	data->tm_min = min;
 75a:	d9 82       	std	Y+1, r13	; 0x01
	data->tm_hour = hour;
 75c:	ea 82       	std	Y+2, r14	; 0x02
	data->tm_mday = day;
 75e:	fb 82       	std	Y+3, r15	; 0x03
	data->tm_wday = weekday;
 760:	0c 83       	std	Y+4, r16	; 0x04
	data->tm_mon = month;
 762:	1d 83       	std	Y+5, r17	; 0x05
	data->tm_year = year;
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9f 83       	std	Y+7, r25	; 0x07
 768:	8e 83       	std	Y+6, r24	; 0x06
}
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	ef 90       	pop	r14
 776:	df 90       	pop	r13
 778:	cf 90       	pop	r12
 77a:	bf 90       	pop	r11
 77c:	08 95       	ret

0000077e <RTC_set_time>:

void RTC_set_time(uint8_t hour, uint8_t min, uint8_t sec, uint8_t day, uint8_t month, uint8_t year, uint8_t weekday){
 77e:	af 92       	push	r10
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	16 2f       	mov	r17, r22
 794:	d4 2f       	mov	r29, r20
 796:	c2 2f       	mov	r28, r18
	/* Convert to BCD */
	hour = decimal_to_bcd(hour);
 798:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 79c:	d8 2e       	mov	r13, r24
	min = decimal_to_bcd(min);
 79e:	81 2f       	mov	r24, r17
 7a0:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 7a4:	b8 2e       	mov	r11, r24
	sec = decimal_to_bcd(sec);
 7a6:	8d 2f       	mov	r24, r29
 7a8:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 7ac:	a8 2e       	mov	r10, r24
	day = decimal_to_bcd(day);
 7ae:	8c 2f       	mov	r24, r28
 7b0:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 7b4:	f8 2e       	mov	r15, r24
	month = decimal_to_bcd(month);
 7b6:	80 2f       	mov	r24, r16
 7b8:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 7bc:	d8 2f       	mov	r29, r24
	year = decimal_to_bcd(year);
 7be:	8e 2d       	mov	r24, r14
 7c0:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 7c4:	c8 2f       	mov	r28, r24
	weekday = decimal_to_bcd(weekday);
 7c6:	8c 2d       	mov	r24, r12
 7c8:	0e 94 3f 03 	call	0x67e	; 0x67e <decimal_to_bcd>
 7cc:	18 2f       	mov	r17, r24
	
	/* Set time by I2C */
	TWI_Start(); // I2C START
 7ce:	0e 94 12 02 	call	0x424	; 0x424 <TWI_Start>
	TWI_Write_SLA_W(PCF8563_Address); // SLAVE ADDRESS AND WRITE MODE
 7d2:	82 ea       	ldi	r24, 0xA2	; 162
 7d4:	0e 94 2e 02 	call	0x45c	; 0x45c <TWI_Write_SLA_W>
	TWI_Write_data(VL_SECONDS_REG); // REGISTER ADDRESS
 7d8:	82 e0       	ldi	r24, 0x02	; 2
 7da:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(sec); // WRITE DATA AND AUTO INCREMENT REGISTER ADDRESS
 7de:	8a 2d       	mov	r24, r10
 7e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(min);
 7e4:	8b 2d       	mov	r24, r11
 7e6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(hour);
 7ea:	8d 2d       	mov	r24, r13
 7ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(day);
 7f0:	8f 2d       	mov	r24, r15
 7f2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(weekday);
 7f6:	81 2f       	mov	r24, r17
 7f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(month);
 7fc:	8d 2f       	mov	r24, r29
 7fe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Write_data(year);
 802:	8c 2f       	mov	r24, r28
 804:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Write_data>
	TWI_Stop();
 808:	0e 94 26 02 	call	0x44c	; 0x44c <TWI_Stop>
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	bf 90       	pop	r11
 81e:	af 90       	pop	r10
 820:	08 95       	ret

00000822 <USART_Init>:

void USART_Init() // Inicjalizacja UART
{
	uint16_t ubrr = MYUBRR;
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 822:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 826:	87 e6       	ldi	r24, 0x67	; 103
 828:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 82c:	88 e1       	ldi	r24, 0x18	; 24
 82e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 832:	86 e0       	ldi	r24, 0x06	; 6
 834:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 838:	08 95       	ret

0000083a <USART_PutC>:
 
 
 void USART_PutC( char data ) // Wysylamy pojedynczy znak
 {
	 /* Wait for empty transmit buffer */
	 while ( !( UCSR0A & (1<<UDRE0)) );
 83a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 83e:	95 ff       	sbrs	r25, 5
 840:	fc cf       	rjmp	.-8      	; 0x83a <USART_PutC>
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
 842:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 846:	08 95       	ret

00000848 <USART_PutS>:
 }
 
 void USART_PutS( char * s) // Wysylamy string, ciag znakow
{
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	ec 01       	movw	r28, r24
	while( *s ) USART_PutC( *s++ );
 84e:	03 c0       	rjmp	.+6      	; 0x856 <USART_PutS+0xe>
 850:	21 96       	adiw	r28, 0x01	; 1
 852:	0e 94 1d 04 	call	0x83a	; 0x83a <USART_PutC>
 856:	88 81       	ld	r24, Y
 858:	81 11       	cpse	r24, r1
 85a:	fa cf       	rjmp	.-12     	; 0x850 <USART_PutS+0x8>
}
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	08 95       	ret

00000862 <sprintf>:
 862:	ae e0       	ldi	r26, 0x0E	; 14
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e7 e3       	ldi	r30, 0x37	; 55
 868:	f4 e0       	ldi	r31, 0x04	; 4
 86a:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__prologue_saves__+0x1c>
 86e:	0d 89       	ldd	r16, Y+21	; 0x15
 870:	1e 89       	ldd	r17, Y+22	; 0x16
 872:	86 e0       	ldi	r24, 0x06	; 6
 874:	8c 83       	std	Y+4, r24	; 0x04
 876:	1a 83       	std	Y+2, r17	; 0x02
 878:	09 83       	std	Y+1, r16	; 0x01
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	9f e7       	ldi	r25, 0x7F	; 127
 87e:	9e 83       	std	Y+6, r25	; 0x06
 880:	8d 83       	std	Y+5, r24	; 0x05
 882:	ae 01       	movw	r20, r28
 884:	47 5e       	subi	r20, 0xE7	; 231
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	6f 89       	ldd	r22, Y+23	; 0x17
 88a:	78 8d       	ldd	r23, Y+24	; 0x18
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	0e 94 53 04 	call	0x8a6	; 0x8a6 <vfprintf>
 894:	ef 81       	ldd	r30, Y+7	; 0x07
 896:	f8 85       	ldd	r31, Y+8	; 0x08
 898:	e0 0f       	add	r30, r16
 89a:	f1 1f       	adc	r31, r17
 89c:	10 82       	st	Z, r1
 89e:	2e 96       	adiw	r28, 0x0e	; 14
 8a0:	e4 e0       	ldi	r30, 0x04	; 4
 8a2:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__epilogue_restores__+0x1c>

000008a6 <vfprintf>:
 8a6:	ab e0       	ldi	r26, 0x0B	; 11
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e9 e5       	ldi	r30, 0x59	; 89
 8ac:	f4 e0       	ldi	r31, 0x04	; 4
 8ae:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__prologue_saves__>
 8b2:	6c 01       	movw	r12, r24
 8b4:	7b 01       	movw	r14, r22
 8b6:	8a 01       	movw	r16, r20
 8b8:	fc 01       	movw	r30, r24
 8ba:	17 82       	std	Z+7, r1	; 0x07
 8bc:	16 82       	std	Z+6, r1	; 0x06
 8be:	83 81       	ldd	r24, Z+3	; 0x03
 8c0:	81 ff       	sbrs	r24, 1
 8c2:	cc c1       	rjmp	.+920    	; 0xc5c <__stack+0x35d>
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	3c 01       	movw	r6, r24
 8ca:	f6 01       	movw	r30, r12
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	f7 01       	movw	r30, r14
 8d0:	93 fd       	sbrc	r25, 3
 8d2:	85 91       	lpm	r24, Z+
 8d4:	93 ff       	sbrs	r25, 3
 8d6:	81 91       	ld	r24, Z+
 8d8:	7f 01       	movw	r14, r30
 8da:	88 23       	and	r24, r24
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <vfprintf+0x3a>
 8de:	ba c1       	rjmp	.+884    	; 0xc54 <__stack+0x355>
 8e0:	85 32       	cpi	r24, 0x25	; 37
 8e2:	39 f4       	brne	.+14     	; 0x8f2 <vfprintf+0x4c>
 8e4:	93 fd       	sbrc	r25, 3
 8e6:	85 91       	lpm	r24, Z+
 8e8:	93 ff       	sbrs	r25, 3
 8ea:	81 91       	ld	r24, Z+
 8ec:	7f 01       	movw	r14, r30
 8ee:	85 32       	cpi	r24, 0x25	; 37
 8f0:	29 f4       	brne	.+10     	; 0x8fc <vfprintf+0x56>
 8f2:	b6 01       	movw	r22, r12
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 8fa:	e7 cf       	rjmp	.-50     	; 0x8ca <vfprintf+0x24>
 8fc:	91 2c       	mov	r9, r1
 8fe:	21 2c       	mov	r2, r1
 900:	31 2c       	mov	r3, r1
 902:	ff e1       	ldi	r31, 0x1F	; 31
 904:	f3 15       	cp	r31, r3
 906:	d8 f0       	brcs	.+54     	; 0x93e <__stack+0x3f>
 908:	8b 32       	cpi	r24, 0x2B	; 43
 90a:	79 f0       	breq	.+30     	; 0x92a <__stack+0x2b>
 90c:	38 f4       	brcc	.+14     	; 0x91c <__stack+0x1d>
 90e:	80 32       	cpi	r24, 0x20	; 32
 910:	79 f0       	breq	.+30     	; 0x930 <__stack+0x31>
 912:	83 32       	cpi	r24, 0x23	; 35
 914:	a1 f4       	brne	.+40     	; 0x93e <__stack+0x3f>
 916:	23 2d       	mov	r18, r3
 918:	20 61       	ori	r18, 0x10	; 16
 91a:	1d c0       	rjmp	.+58     	; 0x956 <__stack+0x57>
 91c:	8d 32       	cpi	r24, 0x2D	; 45
 91e:	61 f0       	breq	.+24     	; 0x938 <__stack+0x39>
 920:	80 33       	cpi	r24, 0x30	; 48
 922:	69 f4       	brne	.+26     	; 0x93e <__stack+0x3f>
 924:	23 2d       	mov	r18, r3
 926:	21 60       	ori	r18, 0x01	; 1
 928:	16 c0       	rjmp	.+44     	; 0x956 <__stack+0x57>
 92a:	83 2d       	mov	r24, r3
 92c:	82 60       	ori	r24, 0x02	; 2
 92e:	38 2e       	mov	r3, r24
 930:	e3 2d       	mov	r30, r3
 932:	e4 60       	ori	r30, 0x04	; 4
 934:	3e 2e       	mov	r3, r30
 936:	2a c0       	rjmp	.+84     	; 0x98c <__stack+0x8d>
 938:	f3 2d       	mov	r31, r3
 93a:	f8 60       	ori	r31, 0x08	; 8
 93c:	1d c0       	rjmp	.+58     	; 0x978 <__stack+0x79>
 93e:	37 fc       	sbrc	r3, 7
 940:	2d c0       	rjmp	.+90     	; 0x99c <__stack+0x9d>
 942:	20 ed       	ldi	r18, 0xD0	; 208
 944:	28 0f       	add	r18, r24
 946:	2a 30       	cpi	r18, 0x0A	; 10
 948:	40 f0       	brcs	.+16     	; 0x95a <__stack+0x5b>
 94a:	8e 32       	cpi	r24, 0x2E	; 46
 94c:	b9 f4       	brne	.+46     	; 0x97c <__stack+0x7d>
 94e:	36 fc       	sbrc	r3, 6
 950:	81 c1       	rjmp	.+770    	; 0xc54 <__stack+0x355>
 952:	23 2d       	mov	r18, r3
 954:	20 64       	ori	r18, 0x40	; 64
 956:	32 2e       	mov	r3, r18
 958:	19 c0       	rjmp	.+50     	; 0x98c <__stack+0x8d>
 95a:	36 fe       	sbrs	r3, 6
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x6b>
 95e:	8a e0       	ldi	r24, 0x0A	; 10
 960:	98 9e       	mul	r9, r24
 962:	20 0d       	add	r18, r0
 964:	11 24       	eor	r1, r1
 966:	92 2e       	mov	r9, r18
 968:	11 c0       	rjmp	.+34     	; 0x98c <__stack+0x8d>
 96a:	ea e0       	ldi	r30, 0x0A	; 10
 96c:	2e 9e       	mul	r2, r30
 96e:	20 0d       	add	r18, r0
 970:	11 24       	eor	r1, r1
 972:	22 2e       	mov	r2, r18
 974:	f3 2d       	mov	r31, r3
 976:	f0 62       	ori	r31, 0x20	; 32
 978:	3f 2e       	mov	r3, r31
 97a:	08 c0       	rjmp	.+16     	; 0x98c <__stack+0x8d>
 97c:	8c 36       	cpi	r24, 0x6C	; 108
 97e:	21 f4       	brne	.+8      	; 0x988 <__stack+0x89>
 980:	83 2d       	mov	r24, r3
 982:	80 68       	ori	r24, 0x80	; 128
 984:	38 2e       	mov	r3, r24
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
 988:	88 36       	cpi	r24, 0x68	; 104
 98a:	41 f4       	brne	.+16     	; 0x99c <__stack+0x9d>
 98c:	f7 01       	movw	r30, r14
 98e:	93 fd       	sbrc	r25, 3
 990:	85 91       	lpm	r24, Z+
 992:	93 ff       	sbrs	r25, 3
 994:	81 91       	ld	r24, Z+
 996:	7f 01       	movw	r14, r30
 998:	81 11       	cpse	r24, r1
 99a:	b3 cf       	rjmp	.-154    	; 0x902 <__stack+0x3>
 99c:	98 2f       	mov	r25, r24
 99e:	9f 7d       	andi	r25, 0xDF	; 223
 9a0:	95 54       	subi	r25, 0x45	; 69
 9a2:	93 30       	cpi	r25, 0x03	; 3
 9a4:	28 f4       	brcc	.+10     	; 0x9b0 <__stack+0xb1>
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	9f e3       	ldi	r25, 0x3F	; 63
 9ac:	99 83       	std	Y+1, r25	; 0x01
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__stack+0xcb>
 9b0:	83 36       	cpi	r24, 0x63	; 99
 9b2:	31 f0       	breq	.+12     	; 0x9c0 <__stack+0xc1>
 9b4:	83 37       	cpi	r24, 0x73	; 115
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <__stack+0xd5>
 9b8:	83 35       	cpi	r24, 0x53	; 83
 9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0xbf>
 9bc:	59 c0       	rjmp	.+178    	; 0xa70 <__stack+0x171>
 9be:	21 c0       	rjmp	.+66     	; 0xa02 <__stack+0x103>
 9c0:	f8 01       	movw	r30, r16
 9c2:	80 81       	ld	r24, Z
 9c4:	89 83       	std	Y+1, r24	; 0x01
 9c6:	0e 5f       	subi	r16, 0xFE	; 254
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	88 24       	eor	r8, r8
 9cc:	83 94       	inc	r8
 9ce:	91 2c       	mov	r9, r1
 9d0:	53 01       	movw	r10, r6
 9d2:	13 c0       	rjmp	.+38     	; 0x9fa <__stack+0xfb>
 9d4:	28 01       	movw	r4, r16
 9d6:	f2 e0       	ldi	r31, 0x02	; 2
 9d8:	4f 0e       	add	r4, r31
 9da:	51 1c       	adc	r5, r1
 9dc:	f8 01       	movw	r30, r16
 9de:	a0 80       	ld	r10, Z
 9e0:	b1 80       	ldd	r11, Z+1	; 0x01
 9e2:	36 fe       	sbrs	r3, 6
 9e4:	03 c0       	rjmp	.+6      	; 0x9ec <__stack+0xed>
 9e6:	69 2d       	mov	r22, r9
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
 9ec:	6f ef       	ldi	r22, 0xFF	; 255
 9ee:	7f ef       	ldi	r23, 0xFF	; 255
 9f0:	c5 01       	movw	r24, r10
 9f2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <strnlen>
 9f6:	4c 01       	movw	r8, r24
 9f8:	82 01       	movw	r16, r4
 9fa:	f3 2d       	mov	r31, r3
 9fc:	ff 77       	andi	r31, 0x7F	; 127
 9fe:	3f 2e       	mov	r3, r31
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <__stack+0x12f>
 a02:	28 01       	movw	r4, r16
 a04:	22 e0       	ldi	r18, 0x02	; 2
 a06:	42 0e       	add	r4, r18
 a08:	51 1c       	adc	r5, r1
 a0a:	f8 01       	movw	r30, r16
 a0c:	a0 80       	ld	r10, Z
 a0e:	b1 80       	ldd	r11, Z+1	; 0x01
 a10:	36 fe       	sbrs	r3, 6
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <__stack+0x11b>
 a14:	69 2d       	mov	r22, r9
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x11f>
 a1a:	6f ef       	ldi	r22, 0xFF	; 255
 a1c:	7f ef       	ldi	r23, 0xFF	; 255
 a1e:	c5 01       	movw	r24, r10
 a20:	0e 94 34 06 	call	0xc68	; 0xc68 <strnlen_P>
 a24:	4c 01       	movw	r8, r24
 a26:	f3 2d       	mov	r31, r3
 a28:	f0 68       	ori	r31, 0x80	; 128
 a2a:	3f 2e       	mov	r3, r31
 a2c:	82 01       	movw	r16, r4
 a2e:	33 fc       	sbrc	r3, 3
 a30:	1b c0       	rjmp	.+54     	; 0xa68 <__stack+0x169>
 a32:	82 2d       	mov	r24, r2
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	88 16       	cp	r8, r24
 a38:	99 06       	cpc	r9, r25
 a3a:	b0 f4       	brcc	.+44     	; 0xa68 <__stack+0x169>
 a3c:	b6 01       	movw	r22, r12
 a3e:	80 e2       	ldi	r24, 0x20	; 32
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 a46:	2a 94       	dec	r2
 a48:	f4 cf       	rjmp	.-24     	; 0xa32 <__stack+0x133>
 a4a:	f5 01       	movw	r30, r10
 a4c:	37 fc       	sbrc	r3, 7
 a4e:	85 91       	lpm	r24, Z+
 a50:	37 fe       	sbrs	r3, 7
 a52:	81 91       	ld	r24, Z+
 a54:	5f 01       	movw	r10, r30
 a56:	b6 01       	movw	r22, r12
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 a5e:	21 10       	cpse	r2, r1
 a60:	2a 94       	dec	r2
 a62:	21 e0       	ldi	r18, 0x01	; 1
 a64:	82 1a       	sub	r8, r18
 a66:	91 08       	sbc	r9, r1
 a68:	81 14       	cp	r8, r1
 a6a:	91 04       	cpc	r9, r1
 a6c:	71 f7       	brne	.-36     	; 0xa4a <__stack+0x14b>
 a6e:	e8 c0       	rjmp	.+464    	; 0xc40 <__stack+0x341>
 a70:	84 36       	cpi	r24, 0x64	; 100
 a72:	11 f0       	breq	.+4      	; 0xa78 <__stack+0x179>
 a74:	89 36       	cpi	r24, 0x69	; 105
 a76:	41 f5       	brne	.+80     	; 0xac8 <__stack+0x1c9>
 a78:	f8 01       	movw	r30, r16
 a7a:	37 fe       	sbrs	r3, 7
 a7c:	07 c0       	rjmp	.+14     	; 0xa8c <__stack+0x18d>
 a7e:	60 81       	ld	r22, Z
 a80:	71 81       	ldd	r23, Z+1	; 0x01
 a82:	82 81       	ldd	r24, Z+2	; 0x02
 a84:	93 81       	ldd	r25, Z+3	; 0x03
 a86:	0c 5f       	subi	r16, 0xFC	; 252
 a88:	1f 4f       	sbci	r17, 0xFF	; 255
 a8a:	08 c0       	rjmp	.+16     	; 0xa9c <__stack+0x19d>
 a8c:	60 81       	ld	r22, Z
 a8e:	71 81       	ldd	r23, Z+1	; 0x01
 a90:	07 2e       	mov	r0, r23
 a92:	00 0c       	add	r0, r0
 a94:	88 0b       	sbc	r24, r24
 a96:	99 0b       	sbc	r25, r25
 a98:	0e 5f       	subi	r16, 0xFE	; 254
 a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 a9c:	f3 2d       	mov	r31, r3
 a9e:	ff 76       	andi	r31, 0x6F	; 111
 aa0:	3f 2e       	mov	r3, r31
 aa2:	97 ff       	sbrs	r25, 7
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <__stack+0x1b9>
 aa6:	90 95       	com	r25
 aa8:	80 95       	com	r24
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	f0 68       	ori	r31, 0x80	; 128
 ab6:	3f 2e       	mov	r3, r31
 ab8:	2a e0       	ldi	r18, 0x0A	; 10
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	a3 01       	movw	r20, r6
 abe:	0e 94 86 06 	call	0xd0c	; 0xd0c <__ultoa_invert>
 ac2:	88 2e       	mov	r8, r24
 ac4:	86 18       	sub	r8, r6
 ac6:	45 c0       	rjmp	.+138    	; 0xb52 <__stack+0x253>
 ac8:	85 37       	cpi	r24, 0x75	; 117
 aca:	31 f4       	brne	.+12     	; 0xad8 <__stack+0x1d9>
 acc:	23 2d       	mov	r18, r3
 ace:	2f 7e       	andi	r18, 0xEF	; 239
 ad0:	b2 2e       	mov	r11, r18
 ad2:	2a e0       	ldi	r18, 0x0A	; 10
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	25 c0       	rjmp	.+74     	; 0xb22 <__stack+0x223>
 ad8:	93 2d       	mov	r25, r3
 ada:	99 7f       	andi	r25, 0xF9	; 249
 adc:	b9 2e       	mov	r11, r25
 ade:	8f 36       	cpi	r24, 0x6F	; 111
 ae0:	c1 f0       	breq	.+48     	; 0xb12 <__stack+0x213>
 ae2:	18 f4       	brcc	.+6      	; 0xaea <__stack+0x1eb>
 ae4:	88 35       	cpi	r24, 0x58	; 88
 ae6:	79 f0       	breq	.+30     	; 0xb06 <__stack+0x207>
 ae8:	b5 c0       	rjmp	.+362    	; 0xc54 <__stack+0x355>
 aea:	80 37       	cpi	r24, 0x70	; 112
 aec:	19 f0       	breq	.+6      	; 0xaf4 <__stack+0x1f5>
 aee:	88 37       	cpi	r24, 0x78	; 120
 af0:	21 f0       	breq	.+8      	; 0xafa <__stack+0x1fb>
 af2:	b0 c0       	rjmp	.+352    	; 0xc54 <__stack+0x355>
 af4:	e9 2f       	mov	r30, r25
 af6:	e0 61       	ori	r30, 0x10	; 16
 af8:	be 2e       	mov	r11, r30
 afa:	b4 fe       	sbrs	r11, 4
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <__stack+0x219>
 afe:	fb 2d       	mov	r31, r11
 b00:	f4 60       	ori	r31, 0x04	; 4
 b02:	bf 2e       	mov	r11, r31
 b04:	09 c0       	rjmp	.+18     	; 0xb18 <__stack+0x219>
 b06:	34 fe       	sbrs	r3, 4
 b08:	0a c0       	rjmp	.+20     	; 0xb1e <__stack+0x21f>
 b0a:	29 2f       	mov	r18, r25
 b0c:	26 60       	ori	r18, 0x06	; 6
 b0e:	b2 2e       	mov	r11, r18
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <__stack+0x21f>
 b12:	28 e0       	ldi	r18, 0x08	; 8
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	05 c0       	rjmp	.+10     	; 0xb22 <__stack+0x223>
 b18:	20 e1       	ldi	r18, 0x10	; 16
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <__stack+0x223>
 b1e:	20 e1       	ldi	r18, 0x10	; 16
 b20:	32 e0       	ldi	r19, 0x02	; 2
 b22:	f8 01       	movw	r30, r16
 b24:	b7 fe       	sbrs	r11, 7
 b26:	07 c0       	rjmp	.+14     	; 0xb36 <__stack+0x237>
 b28:	60 81       	ld	r22, Z
 b2a:	71 81       	ldd	r23, Z+1	; 0x01
 b2c:	82 81       	ldd	r24, Z+2	; 0x02
 b2e:	93 81       	ldd	r25, Z+3	; 0x03
 b30:	0c 5f       	subi	r16, 0xFC	; 252
 b32:	1f 4f       	sbci	r17, 0xFF	; 255
 b34:	06 c0       	rjmp	.+12     	; 0xb42 <__stack+0x243>
 b36:	60 81       	ld	r22, Z
 b38:	71 81       	ldd	r23, Z+1	; 0x01
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 5f       	subi	r16, 0xFE	; 254
 b40:	1f 4f       	sbci	r17, 0xFF	; 255
 b42:	a3 01       	movw	r20, r6
 b44:	0e 94 86 06 	call	0xd0c	; 0xd0c <__ultoa_invert>
 b48:	88 2e       	mov	r8, r24
 b4a:	86 18       	sub	r8, r6
 b4c:	fb 2d       	mov	r31, r11
 b4e:	ff 77       	andi	r31, 0x7F	; 127
 b50:	3f 2e       	mov	r3, r31
 b52:	36 fe       	sbrs	r3, 6
 b54:	0d c0       	rjmp	.+26     	; 0xb70 <__stack+0x271>
 b56:	23 2d       	mov	r18, r3
 b58:	2e 7f       	andi	r18, 0xFE	; 254
 b5a:	a2 2e       	mov	r10, r18
 b5c:	89 14       	cp	r8, r9
 b5e:	58 f4       	brcc	.+22     	; 0xb76 <__stack+0x277>
 b60:	34 fe       	sbrs	r3, 4
 b62:	0b c0       	rjmp	.+22     	; 0xb7a <__stack+0x27b>
 b64:	32 fc       	sbrc	r3, 2
 b66:	09 c0       	rjmp	.+18     	; 0xb7a <__stack+0x27b>
 b68:	83 2d       	mov	r24, r3
 b6a:	8e 7e       	andi	r24, 0xEE	; 238
 b6c:	a8 2e       	mov	r10, r24
 b6e:	05 c0       	rjmp	.+10     	; 0xb7a <__stack+0x27b>
 b70:	b8 2c       	mov	r11, r8
 b72:	a3 2c       	mov	r10, r3
 b74:	03 c0       	rjmp	.+6      	; 0xb7c <__stack+0x27d>
 b76:	b8 2c       	mov	r11, r8
 b78:	01 c0       	rjmp	.+2      	; 0xb7c <__stack+0x27d>
 b7a:	b9 2c       	mov	r11, r9
 b7c:	a4 fe       	sbrs	r10, 4
 b7e:	0f c0       	rjmp	.+30     	; 0xb9e <__stack+0x29f>
 b80:	fe 01       	movw	r30, r28
 b82:	e8 0d       	add	r30, r8
 b84:	f1 1d       	adc	r31, r1
 b86:	80 81       	ld	r24, Z
 b88:	80 33       	cpi	r24, 0x30	; 48
 b8a:	21 f4       	brne	.+8      	; 0xb94 <__stack+0x295>
 b8c:	9a 2d       	mov	r25, r10
 b8e:	99 7e       	andi	r25, 0xE9	; 233
 b90:	a9 2e       	mov	r10, r25
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <__stack+0x2a7>
 b94:	a2 fe       	sbrs	r10, 2
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <__stack+0x2a5>
 b98:	b3 94       	inc	r11
 b9a:	b3 94       	inc	r11
 b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__stack+0x2a7>
 b9e:	8a 2d       	mov	r24, r10
 ba0:	86 78       	andi	r24, 0x86	; 134
 ba2:	09 f0       	breq	.+2      	; 0xba6 <__stack+0x2a7>
 ba4:	b3 94       	inc	r11
 ba6:	a3 fc       	sbrc	r10, 3
 ba8:	11 c0       	rjmp	.+34     	; 0xbcc <__stack+0x2cd>
 baa:	a0 fe       	sbrs	r10, 0
 bac:	06 c0       	rjmp	.+12     	; 0xbba <__stack+0x2bb>
 bae:	b2 14       	cp	r11, r2
 bb0:	88 f4       	brcc	.+34     	; 0xbd4 <__stack+0x2d5>
 bb2:	28 0c       	add	r2, r8
 bb4:	92 2c       	mov	r9, r2
 bb6:	9b 18       	sub	r9, r11
 bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <__stack+0x2d7>
 bba:	b2 14       	cp	r11, r2
 bbc:	60 f4       	brcc	.+24     	; 0xbd6 <__stack+0x2d7>
 bbe:	b6 01       	movw	r22, r12
 bc0:	80 e2       	ldi	r24, 0x20	; 32
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 bc8:	b3 94       	inc	r11
 bca:	f7 cf       	rjmp	.-18     	; 0xbba <__stack+0x2bb>
 bcc:	b2 14       	cp	r11, r2
 bce:	18 f4       	brcc	.+6      	; 0xbd6 <__stack+0x2d7>
 bd0:	2b 18       	sub	r2, r11
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <__stack+0x2d9>
 bd4:	98 2c       	mov	r9, r8
 bd6:	21 2c       	mov	r2, r1
 bd8:	a4 fe       	sbrs	r10, 4
 bda:	10 c0       	rjmp	.+32     	; 0xbfc <__stack+0x2fd>
 bdc:	b6 01       	movw	r22, r12
 bde:	80 e3       	ldi	r24, 0x30	; 48
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 be6:	a2 fe       	sbrs	r10, 2
 be8:	17 c0       	rjmp	.+46     	; 0xc18 <__stack+0x319>
 bea:	a1 fc       	sbrc	r10, 1
 bec:	03 c0       	rjmp	.+6      	; 0xbf4 <__stack+0x2f5>
 bee:	88 e7       	ldi	r24, 0x78	; 120
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <__stack+0x2f9>
 bf4:	88 e5       	ldi	r24, 0x58	; 88
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	b6 01       	movw	r22, r12
 bfa:	0c c0       	rjmp	.+24     	; 0xc14 <__stack+0x315>
 bfc:	8a 2d       	mov	r24, r10
 bfe:	86 78       	andi	r24, 0x86	; 134
 c00:	59 f0       	breq	.+22     	; 0xc18 <__stack+0x319>
 c02:	a1 fe       	sbrs	r10, 1
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <__stack+0x30b>
 c06:	8b e2       	ldi	r24, 0x2B	; 43
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <__stack+0x30d>
 c0a:	80 e2       	ldi	r24, 0x20	; 32
 c0c:	a7 fc       	sbrc	r10, 7
 c0e:	8d e2       	ldi	r24, 0x2D	; 45
 c10:	b6 01       	movw	r22, r12
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c18:	89 14       	cp	r8, r9
 c1a:	38 f4       	brcc	.+14     	; 0xc2a <__stack+0x32b>
 c1c:	b6 01       	movw	r22, r12
 c1e:	80 e3       	ldi	r24, 0x30	; 48
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c26:	9a 94       	dec	r9
 c28:	f7 cf       	rjmp	.-18     	; 0xc18 <__stack+0x319>
 c2a:	8a 94       	dec	r8
 c2c:	f3 01       	movw	r30, r6
 c2e:	e8 0d       	add	r30, r8
 c30:	f1 1d       	adc	r31, r1
 c32:	80 81       	ld	r24, Z
 c34:	b6 01       	movw	r22, r12
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c3c:	81 10       	cpse	r8, r1
 c3e:	f5 cf       	rjmp	.-22     	; 0xc2a <__stack+0x32b>
 c40:	22 20       	and	r2, r2
 c42:	09 f4       	brne	.+2      	; 0xc46 <__stack+0x347>
 c44:	42 ce       	rjmp	.-892    	; 0x8ca <vfprintf+0x24>
 c46:	b6 01       	movw	r22, r12
 c48:	80 e2       	ldi	r24, 0x20	; 32
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c50:	2a 94       	dec	r2
 c52:	f6 cf       	rjmp	.-20     	; 0xc40 <__stack+0x341>
 c54:	f6 01       	movw	r30, r12
 c56:	86 81       	ldd	r24, Z+6	; 0x06
 c58:	97 81       	ldd	r25, Z+7	; 0x07
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <__stack+0x361>
 c5c:	8f ef       	ldi	r24, 0xFF	; 255
 c5e:	9f ef       	ldi	r25, 0xFF	; 255
 c60:	2b 96       	adiw	r28, 0x0b	; 11
 c62:	e2 e1       	ldi	r30, 0x12	; 18
 c64:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__epilogue_restores__>

00000c68 <strnlen_P>:
 c68:	fc 01       	movw	r30, r24
 c6a:	05 90       	lpm	r0, Z+
 c6c:	61 50       	subi	r22, 0x01	; 1
 c6e:	70 40       	sbci	r23, 0x00	; 0
 c70:	01 10       	cpse	r0, r1
 c72:	d8 f7       	brcc	.-10     	; 0xc6a <strnlen_P+0x2>
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	8e 0f       	add	r24, r30
 c7a:	9f 1f       	adc	r25, r31
 c7c:	08 95       	ret

00000c7e <strnlen>:
 c7e:	fc 01       	movw	r30, r24
 c80:	61 50       	subi	r22, 0x01	; 1
 c82:	70 40       	sbci	r23, 0x00	; 0
 c84:	01 90       	ld	r0, Z+
 c86:	01 10       	cpse	r0, r1
 c88:	d8 f7       	brcc	.-10     	; 0xc80 <strnlen+0x2>
 c8a:	80 95       	com	r24
 c8c:	90 95       	com	r25
 c8e:	8e 0f       	add	r24, r30
 c90:	9f 1f       	adc	r25, r31
 c92:	08 95       	ret

00000c94 <fputc>:
 c94:	0f 93       	push	r16
 c96:	1f 93       	push	r17
 c98:	cf 93       	push	r28
 c9a:	df 93       	push	r29
 c9c:	fb 01       	movw	r30, r22
 c9e:	23 81       	ldd	r18, Z+3	; 0x03
 ca0:	21 fd       	sbrc	r18, 1
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <fputc+0x16>
 ca4:	8f ef       	ldi	r24, 0xFF	; 255
 ca6:	9f ef       	ldi	r25, 0xFF	; 255
 ca8:	2c c0       	rjmp	.+88     	; 0xd02 <fputc+0x6e>
 caa:	22 ff       	sbrs	r18, 2
 cac:	16 c0       	rjmp	.+44     	; 0xcda <fputc+0x46>
 cae:	46 81       	ldd	r20, Z+6	; 0x06
 cb0:	57 81       	ldd	r21, Z+7	; 0x07
 cb2:	24 81       	ldd	r18, Z+4	; 0x04
 cb4:	35 81       	ldd	r19, Z+5	; 0x05
 cb6:	42 17       	cp	r20, r18
 cb8:	53 07       	cpc	r21, r19
 cba:	44 f4       	brge	.+16     	; 0xccc <fputc+0x38>
 cbc:	a0 81       	ld	r26, Z
 cbe:	b1 81       	ldd	r27, Z+1	; 0x01
 cc0:	9d 01       	movw	r18, r26
 cc2:	2f 5f       	subi	r18, 0xFF	; 255
 cc4:	3f 4f       	sbci	r19, 0xFF	; 255
 cc6:	31 83       	std	Z+1, r19	; 0x01
 cc8:	20 83       	st	Z, r18
 cca:	8c 93       	st	X, r24
 ccc:	26 81       	ldd	r18, Z+6	; 0x06
 cce:	37 81       	ldd	r19, Z+7	; 0x07
 cd0:	2f 5f       	subi	r18, 0xFF	; 255
 cd2:	3f 4f       	sbci	r19, 0xFF	; 255
 cd4:	37 83       	std	Z+7, r19	; 0x07
 cd6:	26 83       	std	Z+6, r18	; 0x06
 cd8:	14 c0       	rjmp	.+40     	; 0xd02 <fputc+0x6e>
 cda:	8b 01       	movw	r16, r22
 cdc:	ec 01       	movw	r28, r24
 cde:	fb 01       	movw	r30, r22
 ce0:	00 84       	ldd	r0, Z+8	; 0x08
 ce2:	f1 85       	ldd	r31, Z+9	; 0x09
 ce4:	e0 2d       	mov	r30, r0
 ce6:	09 95       	icall
 ce8:	89 2b       	or	r24, r25
 cea:	e1 f6       	brne	.-72     	; 0xca4 <fputc+0x10>
 cec:	d8 01       	movw	r26, r16
 cee:	16 96       	adiw	r26, 0x06	; 6
 cf0:	8d 91       	ld	r24, X+
 cf2:	9c 91       	ld	r25, X
 cf4:	17 97       	sbiw	r26, 0x07	; 7
 cf6:	01 96       	adiw	r24, 0x01	; 1
 cf8:	17 96       	adiw	r26, 0x07	; 7
 cfa:	9c 93       	st	X, r25
 cfc:	8e 93       	st	-X, r24
 cfe:	16 97       	sbiw	r26, 0x06	; 6
 d00:	ce 01       	movw	r24, r28
 d02:	df 91       	pop	r29
 d04:	cf 91       	pop	r28
 d06:	1f 91       	pop	r17
 d08:	0f 91       	pop	r16
 d0a:	08 95       	ret

00000d0c <__ultoa_invert>:
 d0c:	fa 01       	movw	r30, r20
 d0e:	aa 27       	eor	r26, r26
 d10:	28 30       	cpi	r18, 0x08	; 8
 d12:	51 f1       	breq	.+84     	; 0xd68 <__ultoa_invert+0x5c>
 d14:	20 31       	cpi	r18, 0x10	; 16
 d16:	81 f1       	breq	.+96     	; 0xd78 <__ultoa_invert+0x6c>
 d18:	e8 94       	clt
 d1a:	6f 93       	push	r22
 d1c:	6e 7f       	andi	r22, 0xFE	; 254
 d1e:	6e 5f       	subi	r22, 0xFE	; 254
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	af 4f       	sbci	r26, 0xFF	; 255
 d28:	b1 e0       	ldi	r27, 0x01	; 1
 d2a:	3e d0       	rcall	.+124    	; 0xda8 <__ultoa_invert+0x9c>
 d2c:	b4 e0       	ldi	r27, 0x04	; 4
 d2e:	3c d0       	rcall	.+120    	; 0xda8 <__ultoa_invert+0x9c>
 d30:	67 0f       	add	r22, r23
 d32:	78 1f       	adc	r23, r24
 d34:	89 1f       	adc	r24, r25
 d36:	9a 1f       	adc	r25, r26
 d38:	a1 1d       	adc	r26, r1
 d3a:	68 0f       	add	r22, r24
 d3c:	79 1f       	adc	r23, r25
 d3e:	8a 1f       	adc	r24, r26
 d40:	91 1d       	adc	r25, r1
 d42:	a1 1d       	adc	r26, r1
 d44:	6a 0f       	add	r22, r26
 d46:	71 1d       	adc	r23, r1
 d48:	81 1d       	adc	r24, r1
 d4a:	91 1d       	adc	r25, r1
 d4c:	a1 1d       	adc	r26, r1
 d4e:	20 d0       	rcall	.+64     	; 0xd90 <__ultoa_invert+0x84>
 d50:	09 f4       	brne	.+2      	; 0xd54 <__ultoa_invert+0x48>
 d52:	68 94       	set
 d54:	3f 91       	pop	r19
 d56:	2a e0       	ldi	r18, 0x0A	; 10
 d58:	26 9f       	mul	r18, r22
 d5a:	11 24       	eor	r1, r1
 d5c:	30 19       	sub	r19, r0
 d5e:	30 5d       	subi	r19, 0xD0	; 208
 d60:	31 93       	st	Z+, r19
 d62:	de f6       	brtc	.-74     	; 0xd1a <__ultoa_invert+0xe>
 d64:	cf 01       	movw	r24, r30
 d66:	08 95       	ret
 d68:	46 2f       	mov	r20, r22
 d6a:	47 70       	andi	r20, 0x07	; 7
 d6c:	40 5d       	subi	r20, 0xD0	; 208
 d6e:	41 93       	st	Z+, r20
 d70:	b3 e0       	ldi	r27, 0x03	; 3
 d72:	0f d0       	rcall	.+30     	; 0xd92 <__ultoa_invert+0x86>
 d74:	c9 f7       	brne	.-14     	; 0xd68 <__ultoa_invert+0x5c>
 d76:	f6 cf       	rjmp	.-20     	; 0xd64 <__ultoa_invert+0x58>
 d78:	46 2f       	mov	r20, r22
 d7a:	4f 70       	andi	r20, 0x0F	; 15
 d7c:	40 5d       	subi	r20, 0xD0	; 208
 d7e:	4a 33       	cpi	r20, 0x3A	; 58
 d80:	18 f0       	brcs	.+6      	; 0xd88 <__ultoa_invert+0x7c>
 d82:	49 5d       	subi	r20, 0xD9	; 217
 d84:	31 fd       	sbrc	r19, 1
 d86:	40 52       	subi	r20, 0x20	; 32
 d88:	41 93       	st	Z+, r20
 d8a:	02 d0       	rcall	.+4      	; 0xd90 <__ultoa_invert+0x84>
 d8c:	a9 f7       	brne	.-22     	; 0xd78 <__ultoa_invert+0x6c>
 d8e:	ea cf       	rjmp	.-44     	; 0xd64 <__ultoa_invert+0x58>
 d90:	b4 e0       	ldi	r27, 0x04	; 4
 d92:	a6 95       	lsr	r26
 d94:	97 95       	ror	r25
 d96:	87 95       	ror	r24
 d98:	77 95       	ror	r23
 d9a:	67 95       	ror	r22
 d9c:	ba 95       	dec	r27
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <__ultoa_invert+0x86>
 da0:	00 97       	sbiw	r24, 0x00	; 0
 da2:	61 05       	cpc	r22, r1
 da4:	71 05       	cpc	r23, r1
 da6:	08 95       	ret
 da8:	9b 01       	movw	r18, r22
 daa:	ac 01       	movw	r20, r24
 dac:	0a 2e       	mov	r0, r26
 dae:	06 94       	lsr	r0
 db0:	57 95       	ror	r21
 db2:	47 95       	ror	r20
 db4:	37 95       	ror	r19
 db6:	27 95       	ror	r18
 db8:	ba 95       	dec	r27
 dba:	c9 f7       	brne	.-14     	; 0xdae <__ultoa_invert+0xa2>
 dbc:	62 0f       	add	r22, r18
 dbe:	73 1f       	adc	r23, r19
 dc0:	84 1f       	adc	r24, r20
 dc2:	95 1f       	adc	r25, r21
 dc4:	a0 1d       	adc	r26, r0
 dc6:	08 95       	ret

00000dc8 <__prologue_saves__>:
 dc8:	2f 92       	push	r2
 dca:	3f 92       	push	r3
 dcc:	4f 92       	push	r4
 dce:	5f 92       	push	r5
 dd0:	6f 92       	push	r6
 dd2:	7f 92       	push	r7
 dd4:	8f 92       	push	r8
 dd6:	9f 92       	push	r9
 dd8:	af 92       	push	r10
 dda:	bf 92       	push	r11
 ddc:	cf 92       	push	r12
 dde:	df 92       	push	r13
 de0:	ef 92       	push	r14
 de2:	ff 92       	push	r15
 de4:	0f 93       	push	r16
 de6:	1f 93       	push	r17
 de8:	cf 93       	push	r28
 dea:	df 93       	push	r29
 dec:	cd b7       	in	r28, 0x3d	; 61
 dee:	de b7       	in	r29, 0x3e	; 62
 df0:	ca 1b       	sub	r28, r26
 df2:	db 0b       	sbc	r29, r27
 df4:	0f b6       	in	r0, 0x3f	; 63
 df6:	f8 94       	cli
 df8:	de bf       	out	0x3e, r29	; 62
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	cd bf       	out	0x3d, r28	; 61
 dfe:	09 94       	ijmp

00000e00 <__epilogue_restores__>:
 e00:	2a 88       	ldd	r2, Y+18	; 0x12
 e02:	39 88       	ldd	r3, Y+17	; 0x11
 e04:	48 88       	ldd	r4, Y+16	; 0x10
 e06:	5f 84       	ldd	r5, Y+15	; 0x0f
 e08:	6e 84       	ldd	r6, Y+14	; 0x0e
 e0a:	7d 84       	ldd	r7, Y+13	; 0x0d
 e0c:	8c 84       	ldd	r8, Y+12	; 0x0c
 e0e:	9b 84       	ldd	r9, Y+11	; 0x0b
 e10:	aa 84       	ldd	r10, Y+10	; 0x0a
 e12:	b9 84       	ldd	r11, Y+9	; 0x09
 e14:	c8 84       	ldd	r12, Y+8	; 0x08
 e16:	df 80       	ldd	r13, Y+7	; 0x07
 e18:	ee 80       	ldd	r14, Y+6	; 0x06
 e1a:	fd 80       	ldd	r15, Y+5	; 0x05
 e1c:	0c 81       	ldd	r16, Y+4	; 0x04
 e1e:	1b 81       	ldd	r17, Y+3	; 0x03
 e20:	aa 81       	ldd	r26, Y+2	; 0x02
 e22:	b9 81       	ldd	r27, Y+1	; 0x01
 e24:	ce 0f       	add	r28, r30
 e26:	d1 1d       	adc	r29, r1
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	de bf       	out	0x3e, r29	; 62
 e2e:	0f be       	out	0x3f, r0	; 63
 e30:	cd bf       	out	0x3d, r28	; 61
 e32:	ed 01       	movw	r28, r26
 e34:	08 95       	ret

00000e36 <_exit>:
 e36:	f8 94       	cli

00000e38 <__stop_program>:
 e38:	ff cf       	rjmp	.-2      	; 0xe38 <__stop_program>
